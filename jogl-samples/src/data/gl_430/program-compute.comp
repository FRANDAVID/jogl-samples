#version 420 core
#extension GL_ARB_compute_shader : require
#extension GL_ARB_shader_storage_buffer_object : require

#define TRANSFORM0		1

#define BUFFER_INPUT	0
#define BUFFER_OUTPUT	1

precision highp float;
precision highp int;
layout(std140, column_major) uniform;
layout(std430, column_major) buffer;
layout (local_size_x = 4) in;

layout(binding = TRANSFORM0) uniform Transform
{
    mat4 mvp;
} transform;

struct Vertex
{
    vec4 position;
    vec4 texCoord;
    vec4 color;
};

layout(binding = BUFFER_INPUT) readonly buffer iBuffer
{
    Vertex input[];
} inBuffer;

layout(binding = BUFFER_OUTPUT) writeonly buffer oBuffer
{
    Vertex ouput[];
} outBuffer;

void main()
{	
    outBuffer.ouput[gl_LocalInvocationIndex].position = inBuffer.input[gl_LocalInvocationIndex].position;
    //Out.Ouput[gl_LocalInvocationIndex].Position = Transform.MVP * In.Input[gl_LocalInvocationIndex].Position;
    outBuffer.ouput[gl_LocalInvocationIndex].texCoord = inBuffer.input[gl_LocalInvocationIndex].texCoord;
    outBuffer.ouput[gl_LocalInvocationIndex].color = inBuffer.input[gl_LocalInvocationIndex].color;
}