#version 420 core
#extension GL_ARB_compute_shader : require

#define TRANSFORM0		1

#define POSITION_INPUT		0
#define TEXCOORD_INPUT		1
#define COLOR_INPUT		2
#define POSITION_OUTPUT		3
#define TEXCOORD_OUTPUT		4
#define COLOR_OUTPUT		5

precision highp float;
precision highp int;
layout(std140, column_major) uniform;
layout (local_size_x = 8) in;

layout(binding = TRANSFORM0) uniform Transform
{
    mat4 mvp;
} transform;

layout(binding = POSITION_INPUT, rgba32f) readonly uniform imageBuffer positionInput;
layout(binding = TEXCOORD_INPUT, rgba32f) readonly uniform imageBuffer texCoordInput;
layout(binding = COLOR_INPUT, rgba32f) readonly uniform imageBuffer colorInput;
layout(binding = POSITION_OUTPUT, rgba32f) writeonly uniform imageBuffer positionOutput;
layout(binding = TEXCOORD_OUTPUT, rgba32f) writeonly uniform imageBuffer texCoordOutput;
layout(binding = COLOR_OUTPUT, rgba32f) writeonly uniform imageBuffer colorOutput;

void main()
{
    int vertexId = int(gl_LocalInvocationIndex);

    vec4 position = transform.mvp * imageLoad(positionInput, vertexId);
    vec4 texCoord = imageLoad(texCoordInput, vertexId);
    vec4 color = imageLoad(colorInput, vertexId);

    imageStore(positionOutput, vertexId, position);
    imageStore(texCoordOutput, vertexId, texCoord);
    imageStore(colorOutput, vertexId, color * 2.0);
}

